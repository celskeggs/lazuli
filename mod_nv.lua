print = lazuli.get_param()

local alpha_path = "/boot/nv-alpha.data"
local beta_path = "/boot/nv-beta.data"

local data = nil

function fixup(x)
	return x:gsub("%%(.)", function(s)
		if s == "%" then
			return s
		elseif s == "n" then
			return "\n"
		elseif s == "e" then
			return "="
		else
			error("invalid escape sequence: %" .. s)
		end
	end)
end
function fixdown(x)
	assert(type(x) == "string", "fixdown expects a string")
	return x:gsub("%%", "%%%%"):gsub("\n", "%%n"):gsub("=", "%%e")
end
function raw_load(fname)
	if not lazuli.proc_call(nil, "fexists", fname) then return end
	local f = lazuli.proc_call(nil, "fopen", fname, "r")
	local buf = ""
	while true do
		local block = f.read(4096)
		if not block then break end
		buf = buf .. block
	end
	f.close()
	local out = {}
	for k, v in buf:gmatch("([^=\n]+)=([^=\n]+)") do
		k = fixup(k)
		v = fixup(v)
		if v:sub(1, 1) == "$" then
			out[k] = v:sub(2)
		elseif v:sub(1, 1) == "#" then
			out[k] = tonumber(v:sub(2))
			if out[k] == nil then
				print("[nv warning] key has invalid number:", k, "=", v)
			end
		else
			print("[nv warning] key has invalid data:", k, "=", v)
		end
	end
	return out
end
function raw_save(data, fname)
	local f = lazuli.proc_call(nil, "fopen", fname, "w")
	f.write("This file is autogenerated. Do not modify.")
	for k, v in pairs(data) do
		f.write(fixdown(k) .. "=" .. fixdown(v) .. "\n")
	end
	f.close()
end
function load_data()
	local alpha = raw_load(alpha_path)
	local beta = raw_load(beta_path)
	if alpha then
		if beta then
			if alpha.revcount > beta.revcount then
				data = alpha
			else
				if alpha.revcount == beta.revcount then
					print("[nv warning] both files have equal revcounts")
				end
				data = beta
			end
		else
			data = alpha
		end
	elseif beta then
		data = beta
	else
		data = {revcount=0}
		print("[nv warning] no nonvolatile file - creating")
	end
end
function save_data()
	assert(data, "cannot save no data")
	local alpha = raw_load(alpha_path)
	local beta = raw_load(beta_path)
	assert(not alpha or alpha.revcount <= data.revcount, "concurrent nonvolatile modification")
	assert(not beta or beta.revcount <= data.revcount, "concurrent nonvolatile modification")
	data.revcount = data.revcount + 1
	if not alpha then
		raw_save(data, alpha_path)
	elseif not beta then
		raw_save(data, beta_path)
	elseif alpha.revcount < beta.revcount then
		raw_save(data, alpha_path)
	else
		raw_save(data, beta_path)
	end
end

local nv = {}

function nv.nvget(key, default)
	if data == nil then
		load_data()
	end
	if data[key] == nil and default ~= nil then
		data[key] = default
		save_data()
	end
	return data[key]
end
function nv.nvset(key, value)
	assert(key ~= "revcount", "cannot modify revcount")
	if data == nil then
		load_data()
	end
	if data[key] ~= value then
		data[key] = value
		save_data()
	end
end

lazuli.proc_serve_loop(nv, true)
